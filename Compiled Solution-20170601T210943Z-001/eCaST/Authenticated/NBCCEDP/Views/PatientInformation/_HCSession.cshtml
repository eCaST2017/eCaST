@model eCaST.ViewModels.SupportSessionViewModel

<link href="@Url.Content("~/Content/slider.css")" rel="stylesheet" type="text/css" />
<link href="@Url.Content("~/Content/themes/base/jquery.ui.slider.css")" rel="stylesheet" type="text/css" />

<script src="@Url.Content("~/Scripts/bootstrap-slider.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/app/patientinfo.js")" type="text/javascript"></script>

<style type="text/css">
    .txtdiv {
        /*width: 130px;
        height: 50px;*/
        -ms-transform: rotate(270deg); /* IE 9 */
        -moz-transform: rotate(270deg); /* Firefox */
        -webkit-transform: rotate(270deg); /* Safari and Chrome */
        -o-transform: rotate(270deg); /* Opera */
    }

    .clsDatePicker {
        z-index: 100000;
    }
</style>


<div id="HCSection">


    <div align="center">

        <div style="width:95%;text-align:left" class="alert alert-success">

           @Html.Hidden("HBSupportSessionDate")
            <span><i class="fa fa-heartbeat"></i> HC Session Date: <input style="color:#ccc;" type="text" id="HBSupportSessionDateHIDDEN" placeholder="Date of Session"></span>

        </div>
    </div>





    <div style="padding-left:34px">
        <table style="width:100%; padding:2px">



            <tr>

                <td style="border:none">

                    <div>Type of contact for this Session</div>
                    <br />
                    <div>

                        @* <input type="text" id="a1c" class="span2" data-slider-min="@ViewBag.A1CMINSLIDERFIRST" data-slider-max="@ViewBag.A1CMINSLIDERLAST" data-slider-step="1" data-slider-value="-14" value="" data-slider-orientation="horizontal" data-slider-selection="after" data-slider-tooltip="hide">*@

                        @* <input type="text" id="a1c" class="span2" data-slider-min="0" data-slider-max="17" data-slider-step="1.1" data-slider-value="-14" value="0.1,16.9" data-slider-orientation="horizontal" data-slider-selection="after" data-slider-tooltip="hide">*@


                        @Html.DropDownListFor(model => model.HBSessionContactTypeBinID, ((IEnumerable<eCaST.Models.DDHBContactTypeBin>)ViewBag.DDHBSessionContactTypeBinIDs).Select(option => new SelectListItem
                     {
                         //Text = Html.DisplayTextFor(_ => option).ToString(),
                         Text = option.HBSessionContactTypeBinName,
                         Value = option.HBSessionContactTypeBinID.ToString(),
                         Selected = (Model != null) && (option.HBSessionContactTypeBinID == ViewBag.ContactType)
                     }), "Choose...", new { @id = "HCHBSessionContactTypeBinID", @class = "requiredSelect" })
                        @Html.ValidationMessageFor(model => model.HBSessionContactTypeBinID)


                    </div>

                    <br />
                    <br />

                </td>

            </tr>



            <tr>

                <td style="border:none">

                    <div>Setting for this Session</div>
                    <br />
                    <div>

                        @* <input type="text" id="a1c" class="span2" data-slider-min="@ViewBag.A1CMINSLIDERFIRST" data-slider-max="@ViewBag.A1CMINSLIDERLAST" data-slider-step="1" data-slider-value="-14" value="" data-slider-orientation="horizontal" data-slider-selection="after" data-slider-tooltip="hide">*@

                        @* <input type="text" id="a1c" class="span2" data-slider-min="0" data-slider-max="17" data-slider-step="1.1" data-slider-value="-14" value="0.1,16.9" data-slider-orientation="horizontal" data-slider-selection="after" data-slider-tooltip="hide">*@


                        @Html.DropDownListFor(model => model.HBSessionSettingTypeBinID, ((IEnumerable<eCaST.Models.DDHBSettingTypeBin>)ViewBag.DDHBSettingTypeBinIDs).Select(option => new SelectListItem
                     {
                         //Text = Html.DisplayTextFor(_ => option).ToString(),
                         Text = option.HBSessionSettingTypeBinName,
                         Value = option.HBSessionSettingTypeBinID.ToString(),
                         Selected = (Model != null) && (option.HBSessionSettingTypeBinID == ViewBag.SettingType)
                     }), "Choose...", new { @id = "HCHBSessionSettingTypeBinID", @class = "requiredSelect" })
                        @Html.ValidationMessageFor(model => model.HBSessionSettingTypeBinID)


                    </div>

                    <br />
                    <br />

                </td>

            </tr>

            @*  <tr>

                    <td style="border:none">

                        <div>Curriculum for this Session</div>
                        <br />
                        <div>



                            @Html.DropDownListFor(model => model.HBSessionCurriculumTypeBinID, ((IEnumerable<eCaST.Models.DDHBCurriculumTypeBin>)ViewBag.DDHBCurriculumTypeBinIDs).Select(option => new SelectListItem
                                 {
                                     //Text = Html.DisplayTextFor(_ => option).ToString(),
                                     Text = option.HBSessionCurriculumTypeBinName,
                                     Value = option.HBSessionCurriculumTypeBinID.ToString(),
                                     Selected = (Model != null) && (option.HBSessionCurriculumTypeBinID == Model.HBSessionCurriculumTypeBinID)
                                 }), "Choose...", new { @id = "HBSessionCurriculumTypeBinID", @class = "requiredSelect" })
                                @Html.ValidationMessageFor(model => model.HBSessionCurriculumTypeBinID)


                        </div>

                        <br />
                        <br />

                    </td>

                </tr>*@

            <tr>
                <td colspan="2" style="border:none">

                    <input class="requiredSelect" style="width:45px; border:none; color:#666; display:block;" type="text" id="HCHBSessionLengthBinIDHIDDEN">


                </td>


            </tr>



            <tr>

                <td style="border:none">

                    <div>Length of Session (Minutes)</div>
                    <div>
                        @Html.Hidden("HBSessionLengthBinID")
                        <br /><br />
                    </div>
                    <div style="color:#f5f5f5;"><input type="text" id="length" class="span2" value="" data-slider-min="@ViewBag.SLINSLIDERFIRST" data-slider-max="@ViewBag.SLINSLIDERLAST" data-slider-step="1" data-slider-value="-14" data-slider-orientation="horizontal" data-slider-selection="after" data-slider-tooltip="hide"></div>
                    @*<div><input style="border:none; color:#fff; display:none" type="text" id="SystolicBinID1HIDDEN"></div>*@
                    <br />
                    <br />

                </td>

            </tr>

            <tr>
                <td colspan="2" style="border:none">

                    <input class="requiredSelect" style="width:45px; border:none; color:#666; display:block;" type="text" id="HCPatientConfidenceHIDDEN">


                </td>


            </tr>




            <tr>

                <td style="border:none">

                    <div>Patient Confidence</div>
                    <div>@Html.Hidden("PatientConfidence")<br /><br /></div>
                    <div style="color:#f5f5f5;"><input type="text" id="confidence" class="span2" value="" data-slider-min="0" data-slider-max="10" data-slider-step="1" data-slider-value="-14" data-slider-orientation="horizontal" data-slider-selection="after" data-slider-tooltip="hide"></div>
                    @*<div><input style="border:none; color:#fff; display:none" type="text" id="SystolicBinID1HIDDEN"></div>*@
                    <br />
                    <br />

                </td>

            </tr>

            <tr>
                <td colspan="2" style="border:none">

                    <input class="requiredSelect" style="width:45px; border:none; color:#666; display:block;" type="text" id="HCPatientImportanceHIDDEN">


                </td>


            </tr>



            <tr>

                <td style="border:none">

                    <div>Patient Importance</div>
                    <div>@Html.Hidden("PatientImportance")<br /><br /></div>
                    <div style="color:#f5f5f5;"><input type="text" id="importance" class="span2" value="" data-slider-min="0" data-slider-max="10" data-slider-step="1" data-slider-value="-14" data-slider-orientation="horizontal" data-slider-selection="after" data-slider-tooltip="hide"></div>
                    @*<div><input style="border:none; color:#fff; display:none" type="text" id="SystolicBinID1HIDDEN"></div>*@
                    <br />
                    <br />

                </td>

            </tr>

            <tr>

                <td style="border:none">

                    <div>State of Change for this Session</div>
                    <br />
                    <div>

                        @* <input type="text" id="a1c" class="span2" data-slider-min="@ViewBag.A1CMINSLIDERFIRST" data-slider-max="@ViewBag.A1CMINSLIDERLAST" data-slider-step="1" data-slider-value="-14" value="" data-slider-orientation="horizontal" data-slider-selection="after" data-slider-tooltip="hide">*@

                        @* <input type="text" id="a1c" class="span2" data-slider-min="0" data-slider-max="17" data-slider-step="1.1" data-slider-value="-14" value="0.1,16.9" data-slider-orientation="horizontal" data-slider-selection="after" data-slider-tooltip="hide">*@


                        @Html.DropDownListFor(model => model.StateOfChangeBinID, ((IEnumerable<eCaST.Models.DDStateOfChangeBin>)ViewBag.DDStateOfChangeBinIDs).Select(option => new SelectListItem
                     {
                         //Text = Html.DisplayTextFor(_ => option).ToString(),
                         Text = option.StateOfChangeBinName,
                         Value = option.StateOfChangeBinID.ToString(),
                         Selected = (Model != null) && (option.StateOfChangeBinID == ViewBag.SessionChange)
                     }), "Choose...", new { @id = "HCStateOfChangeBinID", @class = "requiredSelect" })
                        @Html.ValidationMessageFor(model => model.StateOfChangeBinID)


                    </div>

                    <br />
                    <br />

                </td>

            </tr>

            <tr>
                <td style="border:none">

                    <div>Location of this Session</div>
                    <br />

                </td>
            </tr>

            <tr>
                <td style="border:none">

                    @Html.DropDownList("SubContractorID", null, String.Empty, new { @style = "font-size:18px" })
                    @Html.ValidationMessageFor(model => model.SubContractorID)
                </td>
            </tr>

            <tr>
                <td style="border:none">
                    <br />
                    <div id="ProviderSection" style="display:block">

                        <div>Health Coaching Provider</div>

                        <br />

                        <div>

                            <select id='ProviderID' name='ProviderID' class="requiredSelect"></select>


                            @*@Html.DropDownListFor(model => model.ProviderID, ((IEnumerable<eCaST.Models.RoleBin>)ViewBag.RoleBinIDs).Select(option => new SelectListItem
                     {
                         //Text = Html.DisplayTextFor(_ => option).ToString(),
                         Text = option.RoleBinName,
                         Value = option.RoleBinID.ToString(),
                         Selected = (Model != null) && (option.RoleBinID == ViewBag.ProviderID)
                     }), "Choose...", new { @id = "ProviderID", @class = "requiredSelect" })
                            @Html.ValidationMessageFor(model => model.ProviderID)*@



                        </div>


                    </div>
                    <br />
                </td>
            </tr>

        </table>
        </div>
    </div>






@*@Html.Hidden("HBSessionCurriculumTypeBinID")*@





<script type="text/javascript">


    $(document).ready(function () {

        $("#HCHBSessionContactTypeBinID").select2({ width: "30%" });
        $("#HCHBSessionSettingTypeBinID").select2({ width: "30%" });
        $("#HCStateOfChangeBinID").select2({ width: "30%" });
        $("#SubContractorID").select2({ width: "30%" });
        $("#ProviderID").select2({ width: "30%" });

        $("#HBSupportSessionDateHIDDEN").val('@(((DateTime)ViewBag.SupportSessionDate).ToString("MM/dd/yyyy"))');
        $("#HBSupportSessionDateHIDDEN").kendoDatePicker({ max: new Date() });

        if ('@ViewBag.SupportSessionID' != null) {

            // Set Session Length
            $slider = $('#length');
            $slider.slider('setValue', '@ViewBag.SLMINSLIDERVALUE');
            $("#HCHBSessionLengthBinIDHIDDEN").val('@ViewBag.SLMINSLIDERVALUE');


            // Set Patient Confidence
            $slider = $('#confidence');
            $slider.slider('setValue', '@ViewBag.PatientConfidence');
            $("#HCPatientConfidenceHIDDEN").val('@ViewBag.PatientConfidence');

            // Set Patient Importance
            $slider = $('#importance');
            $slider.slider('setValue', '@ViewBag.PatientImportance');
            $("#HCPatientImportanceHIDDEN").val('@ViewBag.PatientImportance');


            $("#SubContractorID").val('@ViewBag.SubConID');
            $("#ProviderID").val('@ViewBag.ProviderID');

        }


        @*$("#UpdateSessionButton").click(function () {


            if ('@ViewBag.SupportSessionTypeID' == 1) {




                 //Add Support Session Date
                var ssDate1 = $("#HCHBSupportSessionDateHIDDEN").val();
                document.getElementById("HBSupportSessionDate").value = ssDate1;


             }

            else if ('@ViewBag.SupportSessionTypeID' == 2) {

            // Session Length
                var slS1 = $("#HCHBSessionLengthBinIDHIDDEN").val();
                document.getElementById("HBSessionLengthBinID").value = slS1;

                // Patient Confidence
                var pcD1 = $("#HCPatientConfidenceHIDDEN").val();
                document.getElementById("PatientConfidence").value = pcD1;

                // Patient Importance
                var piS21 = $("#HCPatientImportanceHIDDEN").val();
                document.getElementById("PatientImportance").value = piS21;


                //Add Support Session Date
            var ssDate1 = $("#HCHBSupportSessionDateHIDDEN").val();
            document.getElementById("HBSupportSessionDate").value = ssDate1;

        }

        else {




        }

        });*@


        // Cascading DropDown Plugin
        (function ($) {
            //Return the options stored for this element
            var getOptions = function (element) {
                var options = element.data('options');

                if (options) {
                    return options;
                }
                else {
                    $.error('The element must be initialized first');
                }
            }

            // Set the promt text that will appear as the first value
            var setPromptText = function (element) {
                var defaultValue = getOptions(element).promptText;
                var option = new Option(defaultValue, '');
                element.append(option);
            }

            // Set the text that will appear if there is no data to display
            var setNoInfoText = function (element) {
                var options = getOptions(element);
                var noInfoElement = $('<span></span>').attr('id', 'noInfo_' + element.attr('id')).append(options.noInfoText);

                element.parent().append(noInfoElement);
            }

            // Toggle the noInfoText
            var toggleNoInfoText = function (element, visible) {
                var noInfoElement = $('#noInfo_' + element.attr('id'));
                var options = getOptions(element);

                if (visible) {
                    noInfoElement.show();
                    element.hide();
                }
                else {
                    noInfoElement.hide();
                    element.show();
                }

                $(options.childSelector).each(function () {
                    var child = $(this);
                    var noInfoChildElement = $('#noInfo_' + child.attr('id'));

                    noInfoChildElement.show();
                    child.hide();
                });
            }

            var onChange = function (element) {
                element.bind('change', function () {
                    var options = getOptions(element);
                    //Iterate the childs
                    $(options.childSelector).each(function () {
                        var child = $(this);
                        //Clear the child of its elements
                        methods['clear'].call(child);

                        if (element.val() != '') {
                            methods['load'].call(child, element.val());
                        }
                        else {
                            toggleNoInfoText(child, true);
                        }
                    });
                });
            }

            var methods = {
                init: function (options) {
                    return this.each(function () {
                        // setup private variables
                        var $this = $(this);

                        options = $.extend({}, $.fn.cascadeSelect.defaults, options);

                        //Save the options
                        $this.data('options', options);

                        if (options.promptText) {
                            setPromptText($this);
                        }

                        if (options.noInfoText) {
                            setNoInfoText($this);
                        }

                        if (options.root) {
                            methods['load'].call($this);
                        }
                        else {
                            toggleNoInfoText($this, true);
                        }

                        if (options.childSelector != null) {
                            onChange($this);
                        }
                    });
                },
                clear: function () {
                    var element = $(this);
                    var options = getOptions(element);

                    var onClearCallback = options.onClear;
                    if (onClearCallback && $.isFunction(onClearCallback)) {
                        onClearCallback.call(element);
                    }
                    else {
                        if (options.noInfoText) {
                            var domElement = element.get(0);
                            for (var i = domElement.options.length - 1; i > 0; i--) {
                                domElement.remove(i);
                            }
                        }
                        else {
                            element.empty();
                        }

                        //Call clear on the childs as well
                        $(options.childSelector).each(function () {
                            var child = $(this);
                            //Clear the child of its elements
                            methods['clear'].call(child);
                        });
                    }
                },
                load: function (data) {
                    var element = $(this);
                    var options = getOptions(element);

                    var url = options.url;
                    var filter = options.filter;
                    var json = {};

                    if (filter != null) {
                        json[filter] = data;
                    }

                    data = data || null;

                    var onLoadCallback = options.onLoad;
                    if (onLoadCallback && $.isFunction(onLoadCallback)) {
                        onLoadCallback.call(element, json);
                    }
                    else {
                        $.ajax({
                            url: url,
                            type: 'GET',
                            data: json,
                            dataType: 'JSON',
                            success: function (data) {
                                // because $('#id') != document.getElementById('id')
                                var domElement = element.get(0);

                                //Emtpy the dropdown list
                                for (var i = domElement.options.length - 1; i > 0; i--) {
                                    domElement.remove(i);
                                }

                                if (data.length > 0) {
                                    for (var i = 0; i < data.length; i++) {
                                        var item = data[i];
                                        var option = new Option(item.Name, item.Id);
                                        element.append(option);
                                    }
                                    toggleNoInfoText(element, false);
                                }
                                else {
                                    toggleNoInfoText(element, true);
                                }
                            }
                        });
                    }
                }
            };

            $.fn.cascadeSelect = function (method) {
                if (methods[method]) {
                    return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
                }
                else if (typeof method === 'object' || !method) {
                    return methods.init.apply(this, arguments);
                }
                else {
                    $.error('Method ' + method + ' does not exist on jQuery.cascadeSelect');
                }
            };

            $.fn.cascadeSelect.defaults = {
                root: false,
                url: null,
                childSelector: null,
                promptText: '[Please select an item]',
                noInfoText: 'No information available',
                filter: null,
                onLoad: null,
                onClear: null,
                Option: null
            };
        })(jQuery);


        $("#HCHBSessionLengthBinIDHIDDEN").on("keyup", function () {
            var val = Math.abs(parseInt(this.value, 10) || 0);
            this.value = val > 120 ? 120 : val;
            $('#length').slider('setValue', val);
        });


        $("#HCPatientConfidenceHIDDEN").on("keyup", function () {
            var val = Math.abs(parseInt(this.value, 10) || 0);
            this.value = val > 10 ? 10 : val;
            $('#confidence').slider('setValue', val);
        });


        $("#HCPatientImportanceHIDDEN").on("keyup", function () {
            var val = Math.abs(parseInt(this.value, 10) || 0);
            this.value = val > 10 ? 10 : val;
            $('#importance').slider('setValue', val);
        });


      //  $('#SubContractorID').addClass('requiredSelect');
      //  $('#ProviderID').addClass('requiredSelect');


        //$('input[type="submit"]').on('click', function (e) {

        //    if (($("#SubContractorID").val() == -1)) {

        //        alert('Please select a Facility');
        //        e.preventDefault();
        //    }
        //    else {
        //        //alert('Well Done!!!!');

        //    }
        //});


        //$('input[type="submit"]').on('click', function (e) {

        //    if (($("#SubContractorID").val() != -1)) {


        //        if (($("#ProviderID").val() == -1)) {


        //            alert('Please select a Provider');
        //            e.preventDefault();

        //        }
        //    }
        //    else {
        //        //alert('Well Done!!!!');

        //    }
        //});





    });



</script>


<script type='text/javascript'>


    $(function () {


        //if ($("#SubContractorID").val() == -1) {


        //    $("#ProviderSection").css("display", "none");


        //}
        //else {


        //    $("#ProviderSection").css("display", "block");


        //}
        var keyP = '@ViewBag.ProvID';
        var id = '@ViewBag.SiteID';
        var id2 = 'HC';
        $.getJSON('@Url.Action("GetProviders", "PatientInformation")', { SiteID: id, HBSessionType: id2 },
       function (data) {
           var select = $("#ProviderID");
           select.empty();
           select.append($('<option/>', {
               value: -1,
               text: "Choose..."
           }));
           $.each(data, function (index, data) {

               select.append($('<option/>', {
                   value: data.Id,
                   text: data.Name
               }));

               if ('@ViewBag.SupportSessionID' != "") {

                   //  $("#SubContractorID option[value=" + key + "]").attr("selected", "selected");
                   $("#ProviderID").select2({ width: "30%" }).select2('val', keyP);

               }


           });

       });


        $("#SubContractorID").change(function () {

            if ($("#SubContractorID").val() == -1) {

                $("#ProviderSection").css("display", "none");
            }
            else {

                $("#ProviderSection").css("display", "block");
            }

        });
    });



    var key = '@ViewBag.SubConID';

    $.getJSON('@Url.Action("GetSubContractors", "ScreenProcedures", new { id = ViewBag.Program, id2 = ViewBag.SiteID })', {}, function (subcontractors) {
        var list = $('select#SubContractorID');
        list.find('option').remove();
        list.append($('<option/>', {
            value: -1,
            text: "Choose..."
        }));
        $(subcontractors).each(function (index, subcontractor) {
            list.append('<option value="' + subcontractor.SubContractorID + '">' + subcontractor.SubContractorName + '</option>');

            if ('@ViewBag.SupportSessionID' != "") {

                //  $("#SubContractorID option[value=" + key + "]").attr("selected", "selected");
                $("#SubContractorID").select2({ width: "30%" }).select2('val', key);

            }

        });



    });


    @*
        var id = key;
        var id2 = '@ViewBag.Program';
        $.getJSON('@Url.Action("GetProviders", "ScreenProcedures")', { SubContractorID: id, Program: id2 },
       function (data) {
           var select = $("#ProviderID");
           select.empty();
           select.append($('<option/>', {
               value: -1,
               text: "Choose..."
           }));
           $.each(data, function (index, data) {

               select.append($('<option/>', {
                   value: data.Id,
                   text: data.Name
               }));

               if ('@ViewBag.SupportSessionID' != "") {

                   var key2 = '@ViewBag.ProvID';
                   $("#ProviderID option[value=" + key2 + "]").attr("selected", "selected");

               }

           });


       });*@




</script>


<script type="text/javascript">




    @*$("#SubContractorID").change(function () {
        var id = $(this).val();
        var id2 = '@ViewBag.Program';
        var id3 = 'HC';
        $.getJSON('@Url.Action("GetProviders", "ScreenProcedures")', { SubContractorID: id, Program: id2, HBSessionType: id3 },
        function (data) {
            var select = $("#ProviderID");
            select.empty();
            select.append($('<option/>', {
                value: -1,
                text: "Choose..."
            }));
            $.each(data, function (index, data) {

                select.append($('<option/>', {
                    value: data.Id,
                    text: data.Name
                }));
            });


        });
    });*@



    @*$(document).ready(function () {

        $('#AddSessionButton').on('click', function (e) {


            var iCurHBSupportSessionDate = $("#HBSupportSessionDate").val();
            var iBPDate = '@ViewBag.BPDate';
            var iStopSub = 0;
            var sErr = "Please correct the following issues:\n\n";

            if (new Date(iCurHBSupportSessionDate).getTime() < new Date(iBPDate).getTime()) {
                iStopSub = 1;
                sErr += "-You cannot add a date for the DPP/HC Support Session that is earlier than the initial blood pressure date.\n";
            }

            if (iStopSub != 0) {
                alert(sErr);
                e.preventDefault();
            }



        });


     });*@







</script>



